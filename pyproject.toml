[project]

# BASIC INFORMATION
name = "mlops-ods"
version = "1.0.0"

### DEPENDENCIES AND REQUIREMENTS
requires-python = ">= 3.8"

# ABOUT YOUR PROJECT
authors = [{name = "Oksana Kaledina", email = "kaledinaoa@gmail.com"}]
maintainers = [{name = "Oksana Kaledina", email = "kaledinaoa@gmail.com"}]
description = "educational project"
readme = "README.md"
license = {text = "Oxana License"}

# URLS
[project.urls]
Homepage = "https://gitlab.com/kaledinaoksana/mlops_ods"
Documentation = "https://gitlab.com/kaledinaoksana/mlops_ods"
Repository = "https://gitlab.com/kaledinaoksana/mlops_ods"
Issues = "https://gitlab.com/kaledinaoksana/mlops_ods"

# RUFF
[tool.ruff]

target-version = "py312"
line-length = 88
indent-width = 4

extend-select = [
   "C90",    # mccabe
   "N",      # pep8-naming
   "UP",     # pyupgrade
   "S",      # bandit
   "BLE",    # flake8-blind-except
   "B",      # bugbear
   "C4",     # comprehensions
   "DTZ",    # datetimez
   "EM",     # error-messages
   "FA",     # future-annotations
   "ISC",    # implicit string concat
   "PIE",    # flake8-pie
   "PT",     # flake8-pytest-style
   "SLF",    # flake8-self
   "SIM",    # flake8-simplify
   "ARG",    # flake8-unused-argument
   "ERA",    # eradicate commented out code
   "TRY",    # tryceratops
]


# RUFF LINTERS
[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["E4", "E7", "E9", "F"]
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"


# RUFF FORMATTERS
[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[tool.ruff.extend-per-file-ignores]
"migrations/**.py" = ["E501"]   # line length
"tests/**.py" = ["S101"]  # use of `assert`
